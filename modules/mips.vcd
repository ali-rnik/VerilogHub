$version Generated by VerilatedVcd $end
$date Tue Feb 11 18:20:56 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 < clk $end
  $scope module mips $end
   $var wire  6 . b1 [5:0] $end
   $var wire  1 < clk $end
   $var wire  1 2 s1 $end
   $var wire  1 3 s2 $end
   $var wire 16 # w1 [15:0] $end
   $var wire  1 0 w10 $end
   $var wire  1 1 w11 $end
   $var wire 64 + w12 [63:0] $end
   $var wire 16 4 w2 [15:0] $end
   $var wire 16 $ w3 [15:0] $end
   $var wire 64 % w4 [63:0] $end
   $var wire 64 5 w5 [63:0] $end
   $var wire 64 ' w6 [63:0] $end
   $var wire 64 ) w7 [63:0] $end
   $var wire  3 - w8 [2:0] $end
   $var wire  1 / w9 $end
   $scope module ADDER $end
    $var wire 16 $ in_A [15:0] $end
    $var wire 16 = in_B [15:0] $end
    $var wire 16 # out [15:0] $end
   $upscope $end
   $scope module ALU $end
    $var wire  3 - control [2:0] $end
    $var wire 64 ' in_A [63:0] $end
    $var wire 64 ) in_B [63:0] $end
    $var wire 64 + out [63:0] $end
    $var wire  1 0 zero $end
   $upscope $end
   $scope module ANDM $end
    $var wire  1 / a $end
    $var wire  1 0 b $end
    $var wire  1 1 out $end
   $upscope $end
   $scope module CTRL $end
    $var wire  3 - ALUCtrl [2:0] $end
    $var wire  1 / branch $end
    $var wire  1 2 branchSwap $end
    $var wire  6 ; op [5:0] $end
    $var wire  1 3 writeEn $end
   $upscope $end
   $scope module INST_REG $end
    $var wire  1 < clk $end
    $var wire 64 5 data [63:0] $end
    $var wire 64 % in [63:0] $end
    $var wire 64 5 out [63:0] $end
   $upscope $end
   $scope module MEM $end
    $var wire 16 $ adr [15:0] $end
    $var wire  1 @ clk $end
    $var wire 64 % readData [63:0] $end
    $var wire 64 > writeData [63:0] $end
    $var wire  1 @ writeEn $end
   $upscope $end
   $scope module MUX_16 $end
    $var wire 16 4 a [15:0] $end
    $var wire 16 7 b [15:0] $end
    $var wire 16 $ out [15:0] $end
    $var wire  1 1 s $end
   $upscope $end
   $scope module MUX_6 $end
    $var wire  6 8 a [5:0] $end
    $var wire  6 9 b [5:0] $end
    $var wire  6 . out [5:0] $end
    $var wire  1 2 s $end
   $upscope $end
   $scope module PC $end
    $var wire  1 < clk $end
    $var wire 16 4 data [15:0] $end
    $var wire 16 # in [15:0] $end
    $var wire 16 4 out [15:0] $end
   $upscope $end
   $scope module REG_FILE $end
    $var wire  1 < clk $end
    $var wire  6 : readAdr1 [5:0] $end
    $var wire  6 . readAdr2 [5:0] $end
    $var wire 64 ' readData1 [63:0] $end
    $var wire 64 ) readData2 [63:0] $end
    $var wire  6 9 writeAdr [5:0] $end
    $var wire 64 + writeData [63:0] $end
    $var wire  1 3 writeEnable $end
    $scope module unnamedblk1 $end
     $var wire 32 A i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b0000000000000001 #
b0000000000000000 $
b0000000000000000000000000000000000000000000010000001000011000000 %
b0000000000000000000000000000000000000000000000000000000000000000 '
b0000000000000000000000000000000000000000000000000000000000000000 )
b0000000000000000000000000000000000000000000000000000000000000000 +
b000 -
b000000 .
0/
10
01
02
13
b0000000000000000 4
b0000000000000000000000000000000000000000000000000000000000000000 5
b0000000000000000 7
b000000 8
b000000 9
b000000 :
b000000 ;
1<
b0000000000000001 =
b0000000000000000000000000000000000000000000000000000000000000000 >
0@
b00000000000000000000000000000100 A
#2
0<
#3
b0000000000000010 #
b0000000000000001 $
b0000000000000000000000000000000000000000000100000010000001001010 %
b0000000000000000000000000000000000000000000000000000000000000111 '
b0000000000000000000000000000000000000000000000000000000000000111 )
b0000000000000000000000000000000000000000000000000000000000001110 +
b000010 .
b0000000000000001 4
b0000000000000000000000000000000000000000000010000001000011000000 5
b0000000000000010 7
b000010 8
b000011 9
b000001 :
1<
#4
0<
#5
b0000000000000101 #
b0000000000000100 $
b0000000000000000000000000000000000000000000001000011000010000000 %
b000001 .
1/
11
12
03
b0000000000000010 4
b0000000000000000000000000000000000000000000100000010000001001010 5
b0000000000000100 7
b000100 8
b000001 9
b000010 :
b001010 ;
1<
#6
0<
#7
b0000000000000110 #
b0000000000000101 $
b0000000000000000000000000000000000000000000001000010000010000000 %
b0000000000000000000000000000000000000000000000000000000000001110 '
b0000000000000000000000000000000000000000000000000000000000010101 +
0/
00
01
02
13
b0000000000000101 4
b0000000000000000000000000000000000000000000001000011000010000000 5
b0000000000000001 7
b000001 8
b000010 9
b000011 :
b000000 ;
1<
#8
0<
#9
b0000000000000111 #
b0000000000000110 $
b0000000000000000000000000000000000000000000000000000000000000000 %
b0000000000000000000000000000000000000000000000000000000000010101 '
b0000000000000000000000000000000000000000000000000000000000011100 +
b0000000000000110 4
b0000000000000000000000000000000000000000000001000010000010000000 5
b000010 :
1<
#10
0<
#11
b0000000000001000 #
b0000000000000111 $
b0000000000000000000000000000000000000000000000000000000000000000 '
b0000000000000000000000000000000000000000000000000000000000000000 )
b0000000000000000000000000000000000000000000000000000000000000000 +
b000000 .
10
b0000000000000111 4
b0000000000000000000000000000000000000000000000000000000000000000 5
b0000000000000000 7
b000000 8
b000000 9
b000000 :
1<
#12
0<
#13
b0000000000001001 #
b0000000000001000 $
b0000000000001000 4
1<
#14
0<
#15
b0000000000001010 #
b0000000000001001 $
b0000000000001001 4
1<
#16
0<
#17
b0000000000001011 #
b0000000000001010 $
b0000000000001010 4
1<
#18
0<
#19
b0000000000001100 #
b0000000000001011 $
b0000000000001011 4
1<
