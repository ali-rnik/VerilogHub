$version Generated by VerilatedVcd $end
$date Thu Feb 13 20:15:18 2020
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 C clk $end
  $scope module mips $end
   $var wire  6 2 b1 [5:0] $end
   $var wire  1 C clk $end
   $var wire 64 - o1 [63:0] $end
   $var wire 64 / o2 [63:0] $end
   $var wire  1 6 s1 $end
   $var wire  1 7 s2 $end
   $var wire  1 8 s3 $end
   $var wire 16 # w1 [15:0] $end
   $var wire  1 4 w10 $end
   $var wire  1 5 w11 $end
   $var wire 64 + w12 [63:0] $end
   $var wire 16 9 w2 [15:0] $end
   $var wire 16 $ w3 [15:0] $end
   $var wire 64 % w4 [63:0] $end
   $var wire 64 : w5 [63:0] $end
   $var wire 64 ' w6 [63:0] $end
   $var wire 64 ) w7 [63:0] $end
   $var wire  3 1 w8 [2:0] $end
   $var wire  1 3 w9 $end
   $scope module ADDER $end
    $var wire 16 $ in_A [15:0] $end
    $var wire 16 D in_B [15:0] $end
    $var wire 16 # out [15:0] $end
   $upscope $end
   $scope module ALU $end
    $var wire  3 1 control [2:0] $end
    $var wire 64 ' in_A [63:0] $end
    $var wire 64 / in_B [63:0] $end
    $var wire 64 + out [63:0] $end
    $var wire  1 4 zero $end
   $upscope $end
   $scope module ANDM $end
    $var wire  1 3 a $end
    $var wire  1 4 b $end
    $var wire  1 5 out $end
   $upscope $end
   $scope module CTRL $end
    $var wire  3 1 ALUCtrl [2:0] $end
    $var wire  1 3 branch $end
    $var wire  1 6 branchSwap $end
    $var wire  1 8 immediate $end
    $var wire  6 @ op [5:0] $end
    $var wire  1 7 writeEn $end
   $upscope $end
   $scope module EX46TO64 $end
    $var wire 46 A in [45:0] $end
    $var wire 64 - out [63:0] $end
   $upscope $end
   $scope module INST_REG $end
    $var wire  1 C clk $end
    $var wire 64 : data [63:0] $end
    $var wire 64 % in [63:0] $end
    $var wire 64 : out [63:0] $end
   $upscope $end
   $scope module MEM $end
    $var wire 16 $ adr [15:0] $end
    $var wire  1 G clk $end
    $var wire 64 % readData [63:0] $end
    $var wire 64 E writeData [63:0] $end
    $var wire  1 G writeEn $end
   $upscope $end
   $scope module MUX_16 $end
    $var wire 16 9 a [15:0] $end
    $var wire 16 < b [15:0] $end
    $var wire 16 $ out [15:0] $end
    $var wire  1 5 s $end
   $upscope $end
   $scope module MUX_6 $end
    $var wire  6 = a [5:0] $end
    $var wire  6 > b [5:0] $end
    $var wire  6 2 out [5:0] $end
    $var wire  1 6 s $end
   $upscope $end
   $scope module MUX_64 $end
    $var wire 64 ) a [63:0] $end
    $var wire 64 - b [63:0] $end
    $var wire 64 / out [63:0] $end
    $var wire  1 8 s $end
   $upscope $end
   $scope module PC $end
    $var wire  1 C clk $end
    $var wire 16 9 data [15:0] $end
    $var wire 16 # in [15:0] $end
    $var wire 16 9 out [15:0] $end
   $upscope $end
   $scope module REG_FILE $end
    $var wire  1 C clk $end
    $var wire  6 ? readAdr1 [5:0] $end
    $var wire  6 2 readAdr2 [5:0] $end
    $var wire 64 ' readData1 [63:0] $end
    $var wire 64 ) readData2 [63:0] $end
    $var wire  6 > writeAdr [5:0] $end
    $var wire 64 + writeData [63:0] $end
    $var wire  1 7 writeEnable $end
    $scope module unnamedblk1 $end
     $var wire 32 H i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b0000000000000001 #
b0000000000000000 $
b0000000000000000000000000000000000000000000010000001000011000000 %
b0000000000000000000000000000000000000000000000000000000000000000 '
b0000000000000000000000000000000000000000000000000000000000000000 )
b0000000000000000000000000000000000000000000000000000000000000000 +
b0000000000000000000000000000000000000000000000000000000000000000 -
b0000000000000000000000000000000000000000000000000000000000000000 /
b000 1
b000000 2
03
14
05
06
17
08
b0000000000000000 9
b0000000000000000000000000000000000000000000000000000000000000000 :
b0000000000000000 <
b000000 =
b000000 >
b000000 ?
b000000 @
b0000000000000000000000000000000000000000000000 A
1C
b0000000000000001 D
b0000000000000000000000000000000000000000000000000000000000000000 E
0G
b00000000000000000000000000000100 H
#2
0C
#3
b0000000000000010 #
b0000000000000001 $
b0000000000000000000000000000000000000000000100000010000001001010 %
b0000000000000000000000000000000000000000000000000000000000000111 '
b0000000000000000000000000000000000000000000000000000000000000111 )
b0000000000000000000000000000000000000000000000000000000000001110 +
b0000000000000000000000000000000000000000000000000000000000000010 -
b0000000000000000000000000000000000000000000000000000000000000111 /
b000010 2
b0000000000000001 9
b0000000000000000000000000000000000000000000010000001000011000000 :
b0000000000000010 <
b000010 =
b000011 >
b000001 ?
b0000000000000000000000000000000000000000000010 A
1C
#4
0C
#5
b0000000000000011 #
b0000000000000010 $
b0000000000000000000000000000000000000000000010000011000011000000 %
b0000000000000000000000000000000000000000000000000000000000001011 +
b0000000000000000000000000000000000000000000000000000000000000100 -
b0000000000000000000000000000000000000000000000000000000000000100 /
b000001 2
13
04
16
07
18
b0000000000000010 9
b0000000000000000000000000000000000000000000100000010000001001010 :
b0000000000000100 <
b000100 =
b000001 >
b000010 ?
b001010 @
b0000000000000000000000000000000000000000000100 A
1C
#6
0C
#7
b0000000000000100 #
b0000000000000011 $
b0000000000000000000000000000000000000000000000000000000000001110 '
b0000000000000000000000000000000000000000000000000000000000010101 +
b0000000000000000000000000000000000000000000000000000000000000010 -
b0000000000000000000000000000000000000000000000000000000000000111 /
b000010 2
03
06
17
08
b0000000000000011 9
b0000000000000000000000000000000000000000000010000011000011000000 :
b0000000000000010 <
b000010 =
b000011 >
b000011 ?
b000000 @
b0000000000000000000000000000000000000000000010 A
1C
#8
0C
#9
b0000000000000101 #
b0000000000000100 $
b0000000000000000000000000000000000000000000001000011000010000000 %
b0000000000000000000000000000000000000000000000000000000000010101 '
b0000000000000000000000000000000000000000000000000000000000011100 +
b0000000000000100 9
1C
#10
0C
#11
b0000000000000110 #
b0000000000000101 $
b0000000000000000000000000000000000000000000001000010000010000000 %
b0000000000000000000000000000000000000000000000000000000000011100 '
b0000000000000000000000000000000000000000000000000000000000100011 +
b0000000000000000000000000000000000000000000000000000000000000001 -
b000001 2
b0000000000000101 9
b0000000000000000000000000000000000000000000001000011000010000000 :
b0000000000000001 <
b000001 =
b000010 >
b0000000000000000000000000000000000000000000001 A
1C
#12
0C
#13
b0000000000000111 #
b0000000000000110 $
b0000000000000000000000000000000000000000000000000000000000000000 %
b0000000000000000000000000000000000000000000000000000000000100011 '
b0000000000000000000000000000000000000000000000000000000000101010 +
b0000000000000110 9
b0000000000000000000000000000000000000000000001000010000010000000 :
b000010 ?
1C
#14
0C
#15
b0000000000001000 #
b0000000000000111 $
b0000000000000000000000000000000000000000000000000000000000000000 '
b0000000000000000000000000000000000000000000000000000000000000000 )
b0000000000000000000000000000000000000000000000000000000000000000 +
b0000000000000000000000000000000000000000000000000000000000000000 -
b0000000000000000000000000000000000000000000000000000000000000000 /
b000000 2
14
b0000000000000111 9
b0000000000000000000000000000000000000000000000000000000000000000 :
b0000000000000000 <
b000000 =
b000000 >
b000000 ?
b0000000000000000000000000000000000000000000000 A
1C
#16
0C
#17
b0000000000001001 #
b0000000000001000 $
b0000000000001000 9
1C
#18
0C
#19
b0000000000001010 #
b0000000000001001 $
b0000000000001001 9
1C
